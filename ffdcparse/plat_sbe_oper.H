/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* Host Firmware for POWER Systems Project                                */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2025                             */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#pragma once
#include <endian.h>
#include <sbe_oper.H>
#include <sys/ioctl.h>

#include <log.hpp>

#include <cstdint>
#include <cstring>
#include <vector>

#ifdef PHAL
extern "C"
{
#include <libpdbg.h>
}

// for test data
#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>

#include <cstring>

namespace sbei::oper
{

enum class SBEIoctl : std::uint32_t
{
    SbefifoReadTimeout = _IOW('s', 0x00, unsigned int),
    // Future ioctls can be added here
};

namespace internal
{
static const std::vector<uint32_t> getScom = {
    0x9033603F, 0x00000000, 0xC0DEA201, 0x00000000, 0xFBAD0009, 0x0000A201,
    0x00014000, 0x00A5BA9B, 0x00000001, 0x0001000C, 0x00000000, 0x00000000,
    0x00000000, 0xFBAD0097, 0x0000A201, 0x00014000, 0x02000001, 0x00FE002C,
    0x1CD7B376, 0x00000000, 0x00000004, 0x00040238, 0x00020000, 0x5342455F,
    0x54524143, 0x45000000, 0x00000000, 0x0000300F, 0x38130200, 0xFE2329AF,
    0x17D78400, 0x00000000, 0xFFFFFFFF, 0xF3A94B4C, 0x00000003, 0x00000200,
    0x00000003, 0x00000017, 0x94AC0102, 0xAF018DF2, 0x0C090001, 0xAF0198C5,
    0x5FFA0000, 0xAF019ACD, 0x00000000, 0x00000000, 0x2C8D0101, 0xAF01A18A,
    0x5FD60000, 0xAF01A66D, 0xA6390006, 0xB038EF55, 0x0000DA7A, 0x00000000,
    0xD0A40102, 0xB038F1AA, 0x00000000, 0x00000001, 0xC49C0102, 0xB038F44A,
    0x91A00006, 0xB038F641, 0xC9200000, 0xB038FB65, 0x00000001, 0x00000000,
    0xEB800102, 0xB038FD1A, 0x000000A1, 0x00000001, 0x1F770102, 0xB0526AF6,
    0x000000A1, 0x00000001, 0xF0F10102, 0xB0526D5A, 0x00000003, 0x00000005,
    0x348B0102, 0xB05271C6, 0x00000000, 0x00000000, 0xBA9B0101, 0xB0527B3A,
    0x9FB10000, 0xB0A338E1, 0x35BB0000, 0xB0A33CD1, 0x00000003, 0x00000018,
    0x94AC0102, 0xB0A33EFA, 0x2CCF0000, 0xB0A3427D, 0xC5770000, 0xB0A351ED,
    0x00000000, 0x00000003, 0x00000009, 0x00000002, 0x57060104, 0xB0A35742,
    0x0C090001, 0xB0A35F15, 0x5FFA0000, 0xB0A3611D, 0x00000000, 0x00000000,
    0x2C8D0101, 0xB0A367DA, 0x5FD60000, 0xB0A36CBD, 0xA6390006, 0x5A7CF211,
    0x0000DA7A, 0x00000000, 0xD0A40102, 0x5A7CF466, 0x00000000, 0x00000001,
    0xC49C0102, 0x5A7CF706, 0x91A00006, 0x5A7CF8FD, 0xC9200000, 0x5A7CFE21,
    0x00000001, 0x00000000, 0xEB800102, 0x5A7CFFD6, 0x000000A2, 0x00000001,
    0x1F770102, 0x5A89FA4E, 0x000000A2, 0x00000001, 0xF0F10102, 0x5A89FCB2,
    0x00000003, 0x00000004, 0x348B0102, 0x5A8A0126, 0x00000000, 0x00000000,
    0xBA9B0101, 0x5A8A0A9A, 0x9FB10000, 0x5AC3C4E9, 0x00000000, 0x00050009,
    0x137B0102, 0x5AC3C74E, 0xA54C0000, 0x5AC3CEE1, 0xE2BE0000, 0x5AC3D42D,
    0xAD430000, 0x5AC3D539, 0x00000290, 0xFFFE0888, 0xFFFF99E0, 0xFFFF9748,
    0x84FD0104, 0x5AC3D896, 0x000000A3,
};
// 165 = a5 i.e -2 data

static const std::vector<uint32_t> ffdcDataRaw0 = {
    0xFBAD0039, 0x0000A801, 0x00040000, 0x02000001, 0x00000000, 0x7A951049,
    0xFF000000, 0x00000004, 0x00041038, 0x00020000, 0x5342455F, 0x54524143,
    0x45000000, 0x00000000, 0x0000300F, 0x38131000, 0xFE2329AF, 0x23C34600,
    0x00000000, 0xFFFFFFFF, 0xEF73FA8F, 0x00000018, 0x00015FD8, 0x00000000,
    0x00000000, 0x2C8D0101, 0x9D5C3E06, 0x5FD60000, 0x9D5C4311, 0xA6390006,
    0x9F4D53A9, 0x0000DA7A, 0x00000000, 0xD0A40102, 0x9F4D561E, 0x00000000,
    0x00000001, 0xC49C0102, 0x9F4D58DA, 0x91A00006, 0x9F4D5AF1, 0xC9200000,
    0x9F4D6021, 0x00000001, 0x00000000, 0xEB800102, 0x9F4D61C6, 0x000000A2,
    0x00000001, 0x1F770102, 0x9F62C136, 0x000000A2, 0x00000001, 0xF0F10102,
    0x9F62C392, 0x00000003, 0xDEADDEAD, 0xC0DEA801, 0x00000000, 0x00000003};

static const std::vector<uint32_t> ffdcDataRaw1 = {
    0xFBAD0417, 0x0000A801, 0x00040000, 0x02000001, 0x00000000, 0x7A951049,
    0xFF000000, 0x00000004, 0x00041038, 0x00020000, 0x5342455F, 0x54524143,
    0x45000000, 0x00000000, 0x0000300F, 0x38131000, 0xFE2329AF, 0x23C34600,
    0x00000000, 0xFFFFFFFF, 0xEF73FA8F, 0x00000018, 0x00015FD8, 0x00000000,
    0x00000000, 0x2C8D0101, 0x9D5C3E06, 0x5FD60000, 0x9D5C4311, 0xA6390006,
    0x9F4D53A9, 0x0000DA7A, 0x00000000, 0xD0A40102, 0x9F4D561E, 0x00000000,
    0x00000001, 0xC49C0102, 0x9F4D58DA, 0x91A00006, 0x9F4D5AF1, 0xC9200000,
    0x9F4D6021, 0x00000001, 0x00000000, 0xEB800102, 0x9F4D61C6, 0x000000A2,
    0x00000001, 0x1F770102, 0x9F62C136, 0x000000A2, 0x00000001, 0xF0F10102,
    0x9F62C392, 0x00000003, 0x00000004, 0x348B0102, 0x9F62C7DA, 0x00000000,
    0x00000000, 0xBA9B0101, 0x9F62D142, 0x9FB10000, 0x9FA14901, 0x00000000,
    0x08011400, 0x137B0102, 0x9FA14B7A, 0x5FFA0000, 0x9FA15E0D, 0x00000000,
    0x00000000, 0x2C8D0101, 0x9FA1647E, 0x5FD60000, 0x9FA16989, 0xA6390006,
    0xA4C52195, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xA4C5240A, 0x00000000,
    0x00000001, 0xC49C0102, 0xA4C526C6, 0x91A00006, 0xA4C528DD, 0xC9200000,
    0xA4C52E0D, 0x00000001, 0x00000000, 0xEB800102, 0xA4C52FB6, 0x000000A2,
    0x00000001, 0x1F770102, 0xA4EF3B22, 0x000000A2, 0x00000001, 0xF0F10102,
    0xA4EF3D7E, 0x00000003, 0x00000004, 0x348B0102, 0xA4EF41C6, 0x00000000,
    0x00000000, 0xBA9B0101, 0xA4EF4B2E, 0x9FB10000, 0xA55B0985, 0x00000000,
    0x080114D7, 0x137B0102, 0xA55B0C02, 0x5FFA0000, 0xA55B1E91, 0x00000000,
    0x00000000, 0x2C8D0101, 0xA55B2502, 0x5FD60000, 0xA55B2A0D, 0xA6390006,
    0xA7A4EAC1, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xA7A4ED36, 0x00000000,
    0x00000001, 0xC49C0102, 0xA7A4EFF2, 0x91A00006, 0xA7A4F209, 0xC9200000,
    0xA7A4F73D, 0x00000001, 0x00000000, 0xEB800102, 0xA7A4F8E2, 0x000000A2,
    0x00000001, 0x1F770102, 0xA7D0E2B6, 0x000000A2, 0x00000001, 0xF0F10102,
    0xA7D0E512, 0x00000003, 0x00000004, 0x348B0102, 0xA7D0E95A, 0x00000000,
    0x00000000, 0xBA9B0101, 0xA7D0F2C6, 0x9FB10000, 0xA810E1E9, 0x00000000,
    0x08011400, 0x137B0102, 0xA810E462, 0x5FFA0000, 0xA810F6F5, 0x00000000,
    0x00000000, 0x2C8D0101, 0xA810FD66, 0x5FD60000, 0xA8110271, 0xA6390006,
    0xAD2D90FD, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xAD2D9372, 0x00000000,
    0x00000001, 0xC49C0102, 0xAD2D962E, 0x91A00006, 0xAD2D9845, 0xC9200000,
    0xAD2D9D75, 0x00000001, 0x00000000, 0xEB800102, 0xAD2D9F1A, 0x000000A2,
    0x00000001, 0x1F770102, 0xAD4EAE0E, 0x000000A2, 0x00000001, 0xF0F10102,
    0xAD4EB06A, 0x00000003, 0x00000004, 0x348B0102, 0xAD4EB4B2, 0x00000000,
    0x00000000, 0xBA9B0101, 0xAD4EBE1A, 0x9FB10000, 0xADD57B3D, 0x00000000,
    0x080114D7, 0x137B0102, 0xADD57DBA, 0x5FFA0000, 0xADD59049, 0x00000000,
    0x00000000, 0x2C8D0101, 0xADD596BA, 0x5FD60000, 0xADD59BC5, 0xA6390006,
    0xB010F7F9, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xB010FA6A, 0x00000000,
    0x00000001, 0xC49C0102, 0xB010FD26, 0x91A00006, 0xB010FF3D, 0xC9200000,
    0xB0110471, 0x00000001, 0x00000000, 0xEB800102, 0xB0110616, 0x000000A2,
    0x00000001, 0x1F770102, 0xB0406D3E, 0x000000A2, 0x00000001, 0xF0F10102,
    0xB0406F9A, 0x00000003, 0x00000004, 0x348B0102, 0xB04073E2, 0x00000000,
    0x00000000, 0xBA9B0101, 0xB0407D4A, 0x9FB10000, 0xB0AB99F9, 0x00000000,
    0x08011400, 0x137B0102, 0xB0AB9C76, 0x5FFA0000, 0xB0ABAF05, 0x00000000,
    0x00000000, 0x2C8D0101, 0xB0ABB576, 0x5FD60000, 0xB0ABBA81, 0xA6390006,
    0xB2FCCA49, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xB2FCCCBE, 0x00000000,
    0x00000001, 0xC49C0102, 0xB2FCCF7A, 0x91A00006, 0xB2FCD191, 0xC9200000,
    0xB2FCD6C5, 0x00000001, 0x00000000, 0xEB800102, 0xB2FCD86A, 0x000000A2,
    0x00000001, 0x1F770102, 0xB327454A, 0x000000A2, 0x00000001, 0xF0F10102,
    0xB32747A6, 0x00000003, 0x00000004, 0x348B0102, 0xB3274BEE, 0x00000000,
    0x00000000, 0xBA9B0101, 0xB327555A, 0x9FB10000, 0xB392A375, 0x00000000,
    0x0801100F, 0x137B0102, 0xB392A5F2, 0x5FFA0000, 0xB392B881, 0x00000000,
    0x00000000, 0x2C8D0101, 0xB392BEF2, 0x5FD60000, 0xB392C3FD, 0xA6390006,
    0xB5F70F2D, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xB5F711A2, 0x00000000,
    0x00000001, 0xC49C0102, 0xB5F7145E, 0x91A00006, 0xB5F71675, 0xC9200000,
    0xB5F71BA5, 0x00000001, 0x00000000, 0xEB800102, 0xB5F71D4A, 0x000000A2,
    0x00000002, 0x1F770102, 0xB6292BAA, 0x000000A2, 0x00000002, 0xF0F10102,
    0xB6292E06, 0x00000003, 0x00000004, 0x348B0102, 0xB629328E, 0x00000000,
    0x00000000, 0xBA9B0101, 0xB6293BFA, 0x9FB10000, 0xB6F193C9, 0x5FFA0000,
    0xB6F1A229, 0x00000000, 0x00000000, 0x2C8D0101, 0xB6F1A8F6, 0x5FD60000,
    0xB6F1ADFD, 0xA6390006, 0xB8E5554D, 0x0000DA7A, 0x00000000, 0xD0A40102,
    0xB8E557C2, 0x00000000, 0x00000001, 0xC49C0102, 0xB8E55A7E, 0x91A00006,
    0xB8E55C95, 0xC9200000, 0xB8E561C5, 0x00000001, 0x00000000, 0xEB800102,
    0xB8E5636A, 0x000000A2, 0x00000002, 0x1F770102, 0xB915279A, 0x000000A2,
    0x00000002, 0xF0F10102, 0xB91529F6, 0x00000003, 0x00000004, 0x348B0102,
    0xB9152E7E, 0x00000000, 0x00000000, 0xBA9B0101, 0xB91537E6, 0x9FB10000,
    0xB9EC718D, 0x5FFA0000, 0xB9EC7FE9, 0x00000000, 0x00000000, 0x2C8D0101,
    0xB9EC86BA, 0x5FD60000, 0xB9EC8BC5, 0xA6390006, 0xBBCC1ECD, 0x0000DA7A,
    0x00000000, 0xD0A40102, 0xBBCC213E, 0x00000000, 0x00000001, 0xC49C0102,
    0xBBCC23FA, 0x91A00006, 0xBBCC2611, 0xC9200000, 0xBBCC2B45, 0x00000001,
    0x00000000, 0xEB800102, 0xBBCC2CEA, 0x000000A2, 0x00000002, 0x1F770102,
    0xBBF7B3D2, 0x000000A2, 0x00000002, 0xF0F10102, 0xBBF7B62E, 0x00000003,
    0x00000004, 0x348B0102, 0xBBF7BAB6, 0x00000000, 0x00000000, 0xBA9B0101,
    0xBBF7C41E, 0x9FB10000, 0xBCCE4125, 0x5FFA0000, 0xBCCE4F85, 0x00000000,
    0x00000000, 0x2C8D0101, 0xBCCE5656, 0x5FD60000, 0xBCCE5B61, 0xA6390006,
    0xBEA867E9, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xBEA86A5E, 0x00000000,
    0x00000001, 0xC49C0102, 0xBEA86D1A, 0x91A00006, 0xBEA86F31, 0xC9200000,
    0xBEA87461, 0x00000001, 0x00000000, 0xEB800102, 0xBEA87606, 0x000000A2,
    0x00000002, 0x1F770102, 0xBED408BE, 0x000000A2, 0x00000002, 0xF0F10102,
    0xBED40B1A, 0x00000003, 0x00000004, 0x348B0102, 0xBED40FA2, 0x00000000,
    0x00000000, 0xBA9B0101, 0xBED4190E, 0x9FB10000, 0xBFAA5D9D, 0x5FFA0000,
    0xBFAA6BFD, 0x00000000, 0x00000000, 0x2C8D0101, 0xBFAA72CA, 0x5FD60000,
    0xBFAA77D9, 0xA6390006, 0xC184C3F5, 0x0000DA7A, 0x00000000, 0xD0A40102,
    0xC184C66A, 0x00000000, 0x00000001, 0xC49C0102, 0xC184C926, 0x91A00006,
    0xC184CB3D, 0xC9200000, 0xC184D071, 0x00000001, 0x00000000, 0xEB800102,
    0xC184D216, 0x000000A2, 0x00000002, 0x1F770102, 0xC1B0CDA2, 0x000000A2,
    0x00000002, 0xF0F10102, 0xC1B0CFFE, 0x00000003, 0x00000004, 0x348B0102,
    0xC1B0D486, 0x00000000, 0x00000000, 0xBA9B0101, 0xC1B0DDF2, 0x9FB10000,
    0xC271A5B5, 0x5FFA0000, 0xC271B415, 0x00000000, 0x00000000, 0x2C8D0101,
    0xC271BAE2, 0x5FD60000, 0xC271BFF1, 0xA6390006, 0xC4759B01, 0x0000DA7A,
    0x00000000, 0xD0A40102, 0xC4759D76, 0x00000000, 0x00000001, 0xC49C0102,
    0xC475A032, 0x91A00006, 0xC475A249, 0xC9200000, 0xC475A77D, 0x00000001,
    0x00000000, 0xEB800102, 0xC475A922, 0x000000A2, 0x00000002, 0x1F770102,
    0xC496C9CA, 0x000000A2, 0x00000002, 0xF0F10102, 0xC496CC26, 0x00000003,
    0x00000004, 0x348B0102, 0xC496D0AE, 0x00000000, 0x00000000, 0xBA9B0101,
    0xC496DA1A, 0x9FB10000, 0xC5585CE9, 0x5FFA0000, 0xC5586B45, 0x00000000,
    0x00000000, 0x2C8D0101, 0xC5587216, 0x5FD60000, 0xC5587721, 0xA6390006,
    0xC74DD4D5, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xC74DD74A, 0x00000000,
    0x00000001, 0xC49C0102, 0xC74DDA06, 0x91A00006, 0xC74DDC1D, 0xC9200000,
    0xC74DE14D, 0x00000001, 0x00000000, 0xEB800102, 0xC74DE2F6, 0x000000A2,
    0x00000002, 0x1F770102, 0xC77CD282, 0x000000A2, 0x00000002, 0xF0F10102,
    0xC77CD4DE, 0x00000003, 0x00000004, 0x348B0102, 0xC77CD966, 0x00000000,
    0x00000000, 0xBA9B0101, 0xC77CE2CE, 0x9FB10000, 0xC7E91811, 0x5FFA0000,
    0xC7E92671, 0x00000000, 0x00000000, 0x2C8D0101, 0xC7E92D3E, 0x5FD60000,
    0xC7E9324D, 0xA6390006, 0xC9A29B65, 0x0000DA7A, 0x00000000, 0xD0A40102,
    0xC9A29DDA, 0x00000000, 0x00000001, 0xC49C0102, 0xC9A2A096, 0x91A00006,
    0xC9A2A2AD, 0xC9200000, 0xC9A2A7DD, 0x00000001, 0x00000000, 0xEB800102,
    0xC9A2A986, 0x000000A1, 0x00000004, 0x1F770102, 0xC9CE012A, 0x000000A1,
    0x00000004, 0xF0F10102, 0xC9CE038A, 0x00000003, 0x00000005, 0x348B0102,
    0xC9CE0826, 0x00000000, 0x00000000, 0xBA9B0101, 0xC9CE118E, 0x9FB10000,
    0xCA235E6D, 0x00000002, 0x0000000B, 0xD2940102, 0xCA236116, 0x00000002,
    0x00000000, 0x3DFA0101, 0xCA236356, 0x0000000B, 0x00000002, 0x3A930102,
    0xCA23654A, 0x5FFA0000, 0xCA7CD831, 0x00000000, 0x00000000, 0x2C8D0101,
    0xCA7CDEEE, 0x5FD60000, 0xCA7CE3F9, 0xA6390006, 0xCD4BAB5D, 0x0000DA7A,
    0x00000000, 0xD0A40102, 0xCD4BADD2, 0x00000000, 0x00000001, 0xC49C0102,
    0xCD4BB08E, 0x91A00006, 0xCD4BB2A5, 0xC9200000, 0xCD4BB7D5, 0x00000001,
    0x00000000, 0xEB800102, 0xCD4BB97E, 0x000000A2, 0x00000001, 0x1F770102,
    0xCD610732, 0x000000A2, 0x00000001, 0xF0F10102, 0xCD61098E, 0x00000003,
    0x00000004, 0x348B0102, 0xCD610DD6, 0x00000000, 0x00000000, 0xBA9B0101,
    0xCD61173E, 0x9FB10000, 0xCDA0D8F5, 0x00000000, 0x0801102A, 0x137B0102,
    0xCDA0DB72, 0x5FFA0000, 0xCDA0EE01, 0x00000000, 0x00000000, 0x2C8D0101,
    0xCDA0F472, 0x5FD60000, 0xCDA0F97D, 0xA6390006, 0xCEC49951, 0x0000DA7A,
    0x00000000, 0xD0A40102, 0xCEC49BC6, 0x00000000, 0x00000001, 0xC49C0102,
    0xCEC49E82, 0x91A00006, 0xCEC4A099, 0xC9200000, 0xCEC4A5CD, 0x00000001,
    0x00000000, 0xEB800102, 0xCEC4A772, 0x000000A2, 0x00000002, 0x1F770102,
    0xCED9F81A, 0x000000A2, 0x00000002, 0xF0F10102, 0xCED9FA76, 0x00000003,
    0x00000004, 0x348B0102, 0xCED9FEFE, 0x00000000, 0x00000000, 0xBA9B0101,
    0xCEDA086A, 0x9FB10000, 0xCF4442CD, 0x5FFA0000, 0xCF44512D, 0x00000000,
    0x00000000, 0x2C8D0101, 0xCF4457FA, 0x5FD60000, 0xCF445D01, 0xA6390006,
    0xD3E060DD, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xD3E06352, 0x00000000,
    0x00000001, 0xC49C0102, 0xD3E0660E, 0x91A00006, 0xD3E06825, 0xC9200000,
    0xD3E06D59, 0x00000001, 0x00000000, 0xEB800102, 0xD3E06EFE, 0x000000A2,
    0x00000001, 0x1F770102, 0xD3F61FA2, 0x000000A2, 0x00000001, 0xF0F10102,
    0xD3F621FE, 0x00000003, 0x00000004, 0x348B0102, 0xD3F62646, 0x00000000,
    0x00000000, 0xBA9B0101, 0xD3F62FAE, 0x9FB10000, 0xD436D1D5, 0x00000000,
    0x0801102A, 0x137B0102, 0xD436D452, 0x5FFA0000, 0xD436E6E1, 0x00000000,
    0x00000000, 0x2C8D0101, 0xD436ED52, 0x5FD60000, 0xD436F25D, 0xA6390006,
    0xD55B66E5, 0x0000DA7A, 0x00000000, 0xD0A40102, 0xD55B6956, 0x00000000,
    0x00000001, 0xC49C0102, 0xD55B6C12, 0x91A00006, 0xD55B6E29, 0xC9200000,
    0xD55B735D, 0x00000001, 0x00000000, 0xEB800102, 0xD55B7502, 0x000000A2,
    0x00000002, 0x1F770102, 0xD56ED87E, 0x000000A2, 0x00000002, 0xF0F10102,
    0xD56EDADE, 0x00000003, 0x00000004, 0x348B0102, 0xD56EDF62, 0x00000000,
    0x00000000, 0xBA9B0101, 0xD56EE8CE, 0x9FB10000, 0xD5D9E4F5, 0x5FFA0000,
    0xD5D9F351, 0x00000000, 0x00000000, 0x2C8D0101, 0xD5D9FA1E, 0x5FD60000,
    0xD5D9FF25, 0xA6390006, 0x82EF2B41, 0x0000DA7A, 0x00000000, 0xD0A40102,
    0x82EF2DB2, 0x00000000, 0x00000001, 0xC49C0102, 0x82EF306E, 0x91A00006,
    0x82EF3285, 0xC9200000, 0x82EF37B9, 0x00000001, 0x00000000, 0xEB800102,
    0x82EF395E, 0x000000C1, 0x00000001, 0x1F770102, 0x83048E76, 0x000000C1,
    0x00000001, 0xF0F10102, 0x830490D2, 0x00000003, 0x00000005, 0x348B0102,
    0x830495A6, 0x00000000, 0x00000000, 0xBA9B0101, 0x83049F0E, 0x00000010,
    0xFFFE8D90, 0xFFFF99E0, 0xFFFF99C8, 0x84FD0104, 0x8319EBEA, 0x9FB10000,
    0x83835CB5, 0x00077A17, 0x00000000, 0x14350101, 0x83837B16, 0x000002D0,
    0xFFFE8D90, 0xFFFF99C8, 0xFFFF96F0, 0x84FD0104, 0x83837EEA, 0x000002D0,
    0xFFFE8D90, 0xFFFF96F0, 0xFFFF9418, 0x84FD0104, 0x8383DDDA, 0x007D41D4,
    0x00000000, 0x58670101, 0x838416D2, 0x5FFA0000, 0x83842E19, 0x76010000,
    0x83843699, 0x00000000, 0x00000000, 0x2C8D0101, 0x83843832, 0x5FD60000,
    0x83843D3D, 0xA6390006, 0x652284FD, 0x0000DA7A, 0x00000000, 0xD0A40102,
    0x65228772, 0x00000000, 0x00000001, 0xC49C0102, 0x65228A2E, 0x91A00006,
    0x65228C45, 0xC9200000, 0x65229175, 0x00000001, 0x00000000, 0xEB800102,
    0x6522931A, 0x000000A8, 0x00000001, 0x1F770102, 0x6537121A, 0x000000A8,
    0x00000001, 0xF0F10102, 0x65371476, 0x00000003, 0x00000004, 0x348B0102,
    0x65371902, 0x00000000, 0x00000000, 0xBA9B0101, 0x6537226E, 0x00000000,
    0x00000000, 0x5B240101, 0x65372736, 0x9FB10000, 0x654C6645, 0x00000000,
    0x00000000, 0x01E50101, 0x654C687E, 0x5FFA0000, 0x654C6AED, 0x5FFA0000,
    0xF0E914B9, 0x00000000, 0x00000000, 0x2C8D0101, 0xF0FDB0B2, 0x5FD60000,
    0xF128E409, 0xA6390006, 0xF2861F51, 0x0000DA7A, 0x00000000, 0xD0A40102,
    0xF28621C6, 0x00000000, 0x00000001, 0xC49C0102, 0xF2862482, 0x91A00006,
    0xF2862699, 0xC9200000, 0xF2862BC9, 0x00000001, 0x00000000, 0xEB800102,
    0xF2862D72, 0x000000A8, 0x00000001, 0x1F770102, 0xF29B76B6, 0x000000A8,
    0x00000001, 0xF0F10102, 0xF29B7916, 0x00000003, 0x00000004, 0x348B0102,
    0xF29B7DA2, 0x00000000, 0x00000000, 0xBA9B0101, 0xF29B870A, 0x00000000,
    0x00000000, 0x5B240101, 0xF29B8BD6, 0x9FB10000, 0xF2B0CAE5, 0x00000000,
    0x00000000, 0x01E50101, 0xF2B0CD1E, 0x5FFA0000, 0xF2B0CF8D, 0xBA9B0101,
    0x9CDCA20A, 0x9FB10000, 0x9D5C2289, 0x00000000, 0x080114D7, 0x137B0102,
    0x9D5C2506, 0x5FFA0000, 0x9D5C3795, 0xC0DEA801, 0x00000000, 0x00000003};

inline int sbefifoRead(int fd, std::vector<std::byte>& out)
{
    logger::info("DEVENDER came into sbefifoRead");
    struct stat buffer;
    if (stat("/tmp/ffdc", &buffer) == 0)
    {
        // Convert the uint32_t array into std::byte for the out vector
        out.clear();
        logger::info("%%%%%%%######DEVENDER ffdcDataRaw0 size {} ",
                     ffdcDataRaw0.size());
        logger::info("%%%%%%%######DEVENDER ffdcDataRaw0 size {} ",
                     ffdcDataRaw0.size());
        logger::info("%%%%%%%######DEVENDER ffdcDataRaw0 size {} ",
                     ffdcDataRaw0.size());
        for (auto data : ffdcDataRaw0)
        {
            out.push_back(static_cast<std::byte>((data >> 24) & 0xFF)); // MSB
            out.push_back(static_cast<std::byte>((data >> 16) & 0xFF));
            out.push_back(static_cast<std::byte>((data >> 8) & 0xFF));
            out.push_back(static_cast<std::byte>(data & 0xFF)); // LSB
        }
    }
    else
    {
        out.resize(MAX_SBE_RESP_SIZE);
        ssize_t n = read(fd, out.data(), out.size());

        if (n < 0)
        {
            logger::error("sbefifoRead: read error n={} errno={} {}", n, errno,
                          strerror(errno));
            return EIO;
        }
        out.resize(n); // Trim buffer to actual size read
    }
    logger::info("sbefifoRead: read {} bytes", out.size());
    return 0;
}

inline int sbefifoWrite(int fd, const std::vector<std::byte>& cmd)
{
    ssize_t n = write(fd, cmd.data(), cmd.size());

    if (n < 0)
    {
        logger::error("sbefifoWrite: write error n={} errno={} {}", n, errno,
                      strerror(errno));
        return EIO;
    }

    if (static_cast<size_t>(n) != cmd.size())
    {
        logger::error("sbefifoWrite: partial write n={} expected={}", n,
                      cmd.size());
        return EIO;
    }

    return 0;
}
} // namespace internal

template <fapi2::TargetType T>
fapi2::ReturnCode transport(const fapi2::Target<T>& target,
                            const std::vector<std::byte>& cmd, int timeout,
                            std::vector<std::byte>& out)
{
    logger::info("DEVENDER transport timeout a {} ", timeout);
    struct pdbg_target* ptarget = target;
    logger::info("DEVENDER transport: target path is {}",
                 pdbg_target_path(ptarget));
    int fd = pdbg_get_target_fd(ptarget);
    logger::info("DEVENDER after pdbg_get_backend_fd timeout {} ", timeout);
    if (fd == -1)
    {
        logger::error("transport: invalid backend fd for target {}",
                      pdbg_target_path(ptarget));
        return fapi2::FAPI2_RC_PLAT_ERR_SEE_DATA;
    }

    if (int rc = ioctl(fd,
                       static_cast<unsigned long>(SBEIoctl::SbefifoReadTimeout),
                       &timeout);
        rc != 0)
    {
        logger::error(
            "transport: ioctl set timeout failed rc={} timeout={} errno={} {}",
            rc, timeout, errno, strerror(errno));
        return fapi2::FAPI2_RC_PLAT_ERR_SEE_DATA;
    }

    logger::info("DEVENDER transport before call to sbefifoWrite");
    if (int rc = internal::sbefifoWrite(fd, cmd); rc != 0)
    {
        logger::error("transport: sbefifoWrite failed rc={}", rc);
        return fapi2::FAPI2_RC_PLAT_ERR_SEE_DATA;
    }

    out.clear();
    logger::info("DEVENDER transport before call to sbefifoRead ");
    if (int rc = internal::sbefifoRead(fd, out); rc != 0)
    {
        logger::error("transport: sbefifoRead failed rc={}", rc);
        return fapi2::FAPI2_RC_PLAT_ERR_SEE_DATA;
    }
    logger::info("DEVENDER end of transport method");
    return fapi2::FAPI2_RC_SUCCESS;
}
} // namespace sbei::oper
#endif // PHAL
